global
    # Global settings
    daemon
    maxconn 4096
    log 127.0.0.1 local0
    log 127.0.0.1 local1 notice
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
    stats timeout 30s
    user haproxy
    group haproxy
    
    # SSL settings
    ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384
    ssl-default-bind-options no-sslv3 no-tlsv10 no-tlsv11
    ssl-default-server-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384
    ssl-default-server-options no-sslv3 no-tlsv10 no-tlsv11

defaults
    # Default settings
    log global
    mode http
    option httplog
    option dontlognull
    timeout connect 5000
    timeout client 50000
    timeout server 50000
    option forwardfor
    option http-server-close

# Frontend for HTTP traffic (redirect to HTTPS)
frontend http_frontend
    bind *:80
    redirect scheme https code 301 if !{ ssl_fc }

# Frontend for HTTPS traffic
frontend https_frontend
    bind *:443 ssl crt /etc/ssl/private/btcforecast.pem
    http-request set-header X-Forwarded-Proto https if { ssl_fc }
    http-request set-header X-Forwarded-Port %[dst_port]
    http-request set-header X-Forwarded-For %[src]
    
    # Rate limiting
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request deny deny_status 429 if { sc_http_req_rate(0) gt 100 }
    
    # Security headers
    http-response set-header X-Frame-Options DENY
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains"
    http-response set-header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';"
    
    # ACLs for different services
    acl is_api path_beg /api
    acl is_dashboard path_beg /dashboard
    acl is_static path_beg /static
    acl is_health path /health
    acl is_metrics path /metrics
    
    # Route to appropriate backend
    use_backend api_servers if is_api
    use_backend dashboard_servers if is_dashboard
    use_backend static_servers if is_static
    use_backend health_check if is_health
    use_backend metrics_server if is_metrics
    
    # Default backend
    default_backend api_servers

# Backend for API servers with load balancing
backend api_servers
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    default-server inter 3s fall 3 rise 2
    
    # US East servers
    server api-us-east-1 api-us-east:8001 check weight 100
    server api-us-east-2 api-us-east:8001 check weight 100 backup
    
    # US West servers
    server api-us-west-1 api-us-west:8001 check weight 100
    server api-us-west-2 api-us-west:8001 check weight 100 backup
    
    # EU West servers
    server api-eu-west-1 api-eu-west:8001 check weight 100
    server api-eu-west-2 api-eu-west:8001 check weight 100 backup
    
    # Health check settings
    option httpchk GET /health
    http-check expect status 200
    default-server inter 3s fall 3 rise 2
    
    # Session persistence
    stick-table type string len 32 size 100k expire 30m
    stick on path,field(1,/) if { path_beg /api }
    stick match path,field(1,/) if { path_beg /api }

# Backend for dashboard servers
backend dashboard_servers
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    default-server inter 3s fall 3 rise 2
    
    server dashboard-us-east api-us-east:8501 check weight 100
    server dashboard-us-west api-us-west:8501 check weight 100
    server dashboard-eu-west api-eu-west:8501 check weight 100

# Backend for static files
backend static_servers
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    default-server inter 3s fall 3 rise 2
    
    server nginx-static nginx:80 check weight 100

# Backend for health checks
backend health_check
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    default-server inter 3s fall 3 rise 2
    
    server health-us-east api-us-east:8001 check weight 100
    server health-us-west api-us-west:8001 check weight 100
    server health-eu-west api-eu-west:8001 check weight 100

# Backend for metrics
backend metrics_server
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    default-server inter 3s fall 3 rise 2
    
    server prometheus prometheus:9090 check weight 100

# Stats page
listen stats
    bind *:8404
    mode http
    stats enable
    stats uri /stats
    stats refresh 10s
    stats auth admin:${HAPROXY_STATS_PASSWORD}
    stats admin if TRUE 